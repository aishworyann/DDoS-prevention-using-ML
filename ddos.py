{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c06dc72",
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "class MachineLearning():\n",
    "\n",
    "    def __init__(self):\n",
    "        \n",
    "        print(\"Loading dataset ...\")\n",
    "        \n",
    "        self.counter = 0\n",
    "        \n",
    "        self.flow_dataset = pd.read_csv('/Users/aishworyann/Downloads/dataset.csv')\n",
    "\n",
    "        self.flow_dataset.iloc[:, 2] = self.flow_dataset.iloc[:, 2].str.replace('.', '')\n",
    "        self.flow_dataset.iloc[:, 3] = self.flow_dataset.iloc[:, 3].str.replace('.', '')\n",
    "        self.flow_dataset.iloc[:, 5] = self.flow_dataset.iloc[:, 5].str.replace('.', '')\n",
    "        \n",
    "        self.X_flow = self.flow_dataset.iloc[:, :-1].values\n",
    "        self.X_flow = self.X_flow.astype('float64')\n",
    "\n",
    "        self.y_flow = self.flow_dataset.iloc[:, -1].values\n",
    "\n",
    "        self.X_flow_train, self.X_flow_test, self.y_flow_train, self.y_flow_test = train_test_split(self.X_flow, self.y_flow, test_size=0.25, random_state=0)\n",
    "\n",
    "    def LR(self):\n",
    "        \n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "        print(\"Logistic Regression ...\")\n",
    "\n",
    "        self.classifier = LogisticRegression(solver='liblinear', random_state=0)\n",
    "        self.Confusion_matrix()\n",
    "        \n",
    "    def KNN(self):\n",
    "\n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "        print(\"K-NEAREST NEIGHBORS ...\")\n",
    "\n",
    "        self.classifier = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\n",
    "        self.Confusion_matrix()\n",
    " \n",
    "    def SVM(self):\n",
    "\n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "        print(\"SUPPORT-VECTOR MACHINE ...\")\n",
    "\n",
    "        self.classifier = SVC(kernel='rbf', random_state=0)\n",
    "        self.Confusion_matrix()\n",
    "        \n",
    "    def NB(self):\n",
    "\n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "        print(\"NAIVE-BAYES ...\")\n",
    "\n",
    "        self.classifier = GaussianNB()\n",
    "        self.Confusion_matrix()\n",
    "        \n",
    "        \n",
    "    def DT(self):\n",
    "\n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "        print(\"DECISION TREE ...\")\n",
    "\n",
    "        self.classifier = DecisionTreeClassifier(criterion='entropy', random_state=0)\n",
    "        self.Confusion_matrix()\n",
    "        \n",
    "    def RF(self):\n",
    "\n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "        print(\"RANDOM FOREST ...\")\n",
    "\n",
    "        self.classifier = RandomForestClassifier(n_estimators=10, criterion=\"entropy\", random_state=0)\n",
    "        self.Confusion_matrix()\n",
    "        \n",
    "    def Confusion_matrix(self):\n",
    "        self.counter += 1\n",
    "        \n",
    "        self.flow_model = self.classifier.fit(self.X_flow_train, self.y_flow_train)\n",
    "\n",
    "        self.y_flow_pred = self.flow_model.predict(self.X_flow_test)\n",
    "\n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "\n",
    "        print(\"confusion matrix\")\n",
    "        cm = confusion_matrix(self.y_flow_test, self.y_flow_pred)\n",
    "        print(cm)\n",
    "\n",
    "        acc = accuracy_score(self.y_flow_test, self.y_flow_pred)\n",
    "\n",
    "        print(\"succes accuracy = {0:.2f} %\".format(acc*100))\n",
    "        fail = 1.0 - acc\n",
    "        print(\"fail accuracy = {0:.2f} %\".format(fail*100))\n",
    "        print(\"------------------------------------------------------------------------------\")\n",
    "        \n",
    "        x = ['TP','FP','FN','TN']\n",
    "        x_indexes = np.arange(len(x))\n",
    "        width = 0.10\n",
    "        plt.xticks(ticks=x_indexes, labels=x)\n",
    "        plt.title(\"RÃ©sultats des algorithmes\")\n",
    "        plt.xlabel('Classe predite')\n",
    "        plt.ylabel('Nombre de flux')\n",
    "        plt.tight_layout()\n",
    "        plt.style.use(\"seaborn-darkgrid\")\n",
    "        # plt.style.use(\"dark_background\")\n",
    "        # plt.style.use(\"ggplot\")\n",
    "        if self.counter == 1:\n",
    "            y1 = [cm[0][0],cm[0][1],cm[1][0],cm[1][1]]\n",
    "            plt.bar(x_indexes-2*width,y1, width=width, color=\"#1b7021\", label='LR')\n",
    "            plt.legend()\n",
    "        if self.counter == 2:\n",
    "            y2 = [cm[0][0],cm[0][1],cm[1][0],cm[1][1]]\n",
    "            plt.bar(x_indexes-width,y2, width=width, color=\"#e46e6e\", label='KNN')\n",
    "            plt.legend()\n",
    "        if self.counter == 3:\n",
    "            y3 = [cm[0][0],cm[0][1],cm[1][0],cm[1][1]]\n",
    "            plt.bar(x_indexes,y3, width=width, color=\"#0000ff\", label='NB')\n",
    "            plt.legend()\n",
    "        if self.counter == 4:\n",
    "            y4 = [cm[0][0],cm[0][1],cm[1][0],cm[1][1]]\n",
    "            plt.bar(x_indexes+width,y4, width=width, color=\"#e0d692\", label='DT')\n",
    "            plt.legend()\n",
    "        if self.counter == 5:\n",
    "            y5 = [cm[0][0],cm[0][1],cm[1][0],cm[1][1]]\n",
    "            plt.bar(x_indexes+2*width,y5, width=width, color=\"#000000\", label='RF')\n",
    "            plt.legend()\n",
    "            plt.show()\n",
    "        \n",
    "        \n",
    "def main():\n",
    "    \n",
    "    start_script = datetime.now()\n",
    "    \n",
    "    ml = MachineLearning()\n",
    "    \n",
    "    start = datetime.now()\n",
    "    ml.LR()\n",
    "    end = datetime.now()\n",
    "    print(\"LEARNING and PREDICTING Time: \", (end-start)) \n",
    "    \n",
    "    start = datetime.now()\n",
    "    ml.KNN()\n",
    "    end = datetime.now()\n",
    "    print(\"LEARNING and PREDICTING Time: \", (end-start))\n",
    "    \n",
    "    # start = datetime.now()\n",
    "    # ml.SVM()\n",
    "    # end = datetime.now()\n",
    "    # print(\"LEARNING and PREDICTING Time: \", (end-start))\n",
    "    \n",
    "    start = datetime.now()\n",
    "    ml.NB()\n",
    "    end = datetime.now()\n",
    "    print(\"LEARNING and PREDICTING Time: \", (end-start))\n",
    "    \n",
    "    start = datetime.now()\n",
    "    ml.DT()\n",
    "    end = datetime.now()\n",
    "    print(\"LEARNING and PREDICTING Time: \", (end-start))\n",
    "    \n",
    "    start = datetime.now()\n",
    "    ml.RF()\n",
    "    end = datetime.now()\n",
    "    print(\"LEARNING and PREDICTING Time: \", (end-start))\n",
    "    \n",
    "    end_script = datetime.now()\n",
    "    print(\"Script Time: \", (end_script-start_script))\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1672a79a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
